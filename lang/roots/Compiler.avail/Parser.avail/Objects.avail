Module "Objects"
Uses
	"Avail",
	"Whitespace"
Names
	/* Constructors. */
	"…#«…:_‡…#§»"
Body

/**
 * Herein is support for simple structured objects. Objects are strongly-typed
 * algebraic data bundles. Objects are considered to belong to the same type if
 * their key sets are equal. Some object type {@code "B"} is considered a
 * subtype of another object type {@code "A"} iff (1) every key of {@code "A"}
 * is a key of {@code "B"} and (2) the value type associated with each key of
 * {@code "B"} is a subtype of the value type associated with the corresponding
 * key of {@code "A"}.
 *
 * Given these constraints, we use Avail's {@type "object"s} and
 * {@type "object meta" object types} directly, but introduce novel syntax more
 * suitable for embedding in the Xef prompting language.
 * 
 * @module "Objects"
 */

////////////////////////////////////////////////////////////////////////////////
//                               Constructors.                                //
////////////////////////////////////////////////////////////////////////////////

Public macro "…#«…:_‡…#§»" is
[
	indent : literal phrase ⇒ literal token ⇒ {indent id}ᵀ,
	fields : list phrase ⇒
		<keyword token, any, literal token ⇒ {indent id}ᵀ…|2..3>+
|
	Reject parse, expected: "implement this"
] : ⊤,
[
	indent : literal phrase ⇒ literal token ⇒ {indent id}ᵀ,
	fields : list phrase ⇒
		<keyword token, any, literal token ⇒ {indent id}ᵀ…|2..3>+
|
	Reject parse, expected: "implement this"
];

// simple data type that contains a list of trivia questions and answers.
//    question: "What planet is known as the Red Planet?"
//    answer: "Mars"
