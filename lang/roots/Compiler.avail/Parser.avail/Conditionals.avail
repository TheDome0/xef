Module "Conditionals"
Uses
	"Avail",
	"Blocks",
	"Model"
Names
	/* Conditionals. */
	"*if_:«⇥_!»↹else:«⇥_!»"
Body

////////////////////////////////////////////////////////////////////////////////
//                               Conditionals.                                //
////////////////////////////////////////////////////////////////////////////////

/**
 * Construct a conditional expression that answers:
 *
 * * Iff {@param "predicate"} is {@method "true"}, then the result of applying
 *   {@param "trueBlock"};
 * * Otherwise, the result of applying {@param "falseBlock"}.
 *
 * @macro "*if_:⇥_↹else:⇥_"
 * @param "predicate" "expression phrase ⇒ Kleene"
 *   The predicate.
 * @param "trueBlock" "expression phrase ⇒ ⊤"
 *   The block to apply if {@param "predicate"} evaluates to {@method "true"}.
 * @param "falseBlock" "expression phrase ⇒ ⊤"
 *   The block to apply if {@param "predicate"} evaluates to {@method "false"}.
 * @returns "send phrase ⇒ ⊤"
 */
Public macro "*if_:«⇥_!»↹else:«⇥_!»" is
[
	predicate : expression phrase ⇒ Kleene,
	trueBlock : list phrase ⇒ (phrase+),
	falseBlock : list phrase ⇒ (phrase+)
|
	Require: trueBlock has nonempty block form;
	Require: falseBlock has nonempty block form;
	restricted send Foundation $"If|if_then_else_" with «<
		⟦⦊predicate⦉ = true⟧,
		trueBlock → block phrase,
		falseBlock → block phrase
	>» : ⊤
];
