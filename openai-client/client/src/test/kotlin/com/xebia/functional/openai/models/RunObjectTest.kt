/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.models

import io.kotlintest.specs.ShouldSpec

class RunObjectTest : ShouldSpec() {
  init {
    // uncomment below to create an instance of RunObject
    // val modelInstance = RunObject()

    // to test the property `id` - The identifier, which can be referenced in API endpoints.
    should("test id") {
      // uncomment below to test the property
      // modelInstance.id shouldBe ("TODO")
    }

    // to test the property ``object`` - The object type, which is always `thread.run`.
    should("test `object`") {
      // uncomment below to test the property
      // modelInstance.`object` shouldBe ("TODO")
    }

    // to test the property `createdAt` - The Unix timestamp (in seconds) for when the run was
    // created.
    should("test createdAt") {
      // uncomment below to test the property
      // modelInstance.createdAt shouldBe ("TODO")
    }

    // to test the property `threadId` - The ID of the [thread](/docs/api-reference/threads) that
    // was executed on as a part of this run.
    should("test threadId") {
      // uncomment below to test the property
      // modelInstance.threadId shouldBe ("TODO")
    }

    // to test the property `assistantId` - The ID of the
    // [assistant](/docs/api-reference/assistants) used for execution of this run.
    should("test assistantId") {
      // uncomment below to test the property
      // modelInstance.assistantId shouldBe ("TODO")
    }

    // to test the property `status` - The status of the run, which can be either `queued`,
    // `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or
    // `expired`.
    should("test status") {
      // uncomment below to test the property
      // modelInstance.status shouldBe ("TODO")
    }

    // to test the property `requiredAction`
    should("test requiredAction") {
      // uncomment below to test the property
      // modelInstance.requiredAction shouldBe ("TODO")
    }

    // to test the property `lastError`
    should("test lastError") {
      // uncomment below to test the property
      // modelInstance.lastError shouldBe ("TODO")
    }

    // to test the property `expiresAt` - The Unix timestamp (in seconds) for when the run will
    // expire.
    should("test expiresAt") {
      // uncomment below to test the property
      // modelInstance.expiresAt shouldBe ("TODO")
    }

    // to test the property `startedAt` - The Unix timestamp (in seconds) for when the run was
    // started.
    should("test startedAt") {
      // uncomment below to test the property
      // modelInstance.startedAt shouldBe ("TODO")
    }

    // to test the property `cancelledAt` - The Unix timestamp (in seconds) for when the run was
    // cancelled.
    should("test cancelledAt") {
      // uncomment below to test the property
      // modelInstance.cancelledAt shouldBe ("TODO")
    }

    // to test the property `failedAt` - The Unix timestamp (in seconds) for when the run failed.
    should("test failedAt") {
      // uncomment below to test the property
      // modelInstance.failedAt shouldBe ("TODO")
    }

    // to test the property `completedAt` - The Unix timestamp (in seconds) for when the run was
    // completed.
    should("test completedAt") {
      // uncomment below to test the property
      // modelInstance.completedAt shouldBe ("TODO")
    }

    // to test the property `model` - The model that the [assistant](/docs/api-reference/assistants)
    // used for this run.
    should("test model") {
      // uncomment below to test the property
      // modelInstance.model shouldBe ("TODO")
    }

    // to test the property `instructions` - The instructions that the
    // [assistant](/docs/api-reference/assistants) used for this run.
    should("test instructions") {
      // uncomment below to test the property
      // modelInstance.instructions shouldBe ("TODO")
    }

    // to test the property `tools` - The list of tools that the
    // [assistant](/docs/api-reference/assistants) used for this run.
    should("test tools") {
      // uncomment below to test the property
      // modelInstance.tools shouldBe ("TODO")
    }

    // to test the property `fileIds` - The list of [File](/docs/api-reference/files) IDs the
    // [assistant](/docs/api-reference/assistants) used for this run.
    should("test fileIds") {
      // uncomment below to test the property
      // modelInstance.fileIds shouldBe ("TODO")
    }

    // to test the property `metadata` - Set of 16 key-value pairs that can be attached to an
    // object. This can be useful for storing additional information about the object in a
    // structured format. Keys can be a maximum of 64 characters long and values can be a maxium of
    // 512 characters long.
    should("test metadata") {
      // uncomment below to test the property
      // modelInstance.metadata shouldBe ("TODO")
    }

    // to test the property `usage`
    should("test usage") {
      // uncomment below to test the property
      // modelInstance.usage shouldBe ("TODO")
    }
  }
}
