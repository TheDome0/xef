/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.generated.api

import com.xebia.functional.openai.generated.api.Models.*
import com.xebia.functional.openai.generated.model.DeleteModelResponse
import com.xebia.functional.openai.generated.model.ListModelsResponse
import com.xebia.functional.openai.generated.model.Model
import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.request.request
import io.ktor.client.request.setBody
import io.ktor.http.ContentType
import io.ktor.http.HttpMethod
import io.ktor.http.contentType
import io.ktor.http.path
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

/**  */
interface Models {

  /**
   * Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
   *
   * @param model The model to delete
   * @return DeleteModelResponse
   */
  suspend fun deleteModel(model: kotlin.String): DeleteModelResponse

  /**
   * Lists the currently available models, and provides basic information about each one such as the
   * owner and availability.
   *
   * @return ListModelsResponse
   */
  suspend fun listModels(): ListModelsResponse

  /**
   * Retrieves a model instance, providing basic information about the model such as the owner and
   * permissioning.
   *
   * @param model The ID of the model to use for this request
   * @return Model
   */
  suspend fun retrieveModel(model: kotlin.String): Model
}

fun Models(client: HttpClient): Models =
  object : Models {
    override suspend fun deleteModel(
      model: kotlin.String,
    ): DeleteModelResponse =
      client
        .request {
          method = HttpMethod.Delete
          contentType(ContentType.Application.Json)
          url { path("/models/{model}".replace("{" + "model" + "}", "$model")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun listModels(): ListModelsResponse =
      client
        .request {
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url { path("/models") }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()

    override suspend fun retrieveModel(
      model: kotlin.String,
    ): Model =
      client
        .request {
          method = HttpMethod.Get
          contentType(ContentType.Application.Json)
          url { path("/models/{model}".replace("{" + "model" + "}", "$model")) }
          setBody(io.ktor.client.utils.EmptyContent)
        }
        .body()
  }
